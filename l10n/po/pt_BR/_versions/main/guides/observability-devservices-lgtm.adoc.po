msgid ""
msgstr ""
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Observability Dev Services with Grafana OTel LGTM"
msgstr "Serviços de desenvolvimento de observabilidade com Grafana OTel LGTM"

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid ""
"This Dev Service provides the https://github.com/grafana/docker-otel-lgtm[Grafana OTel-LGTM], an `all-in-one` Docker image containing an https://opentelemetry.io/docs/collector[OpenTelemetry Collector] receiving and then forwarding telemetry data to https://prometheus.io/[Prometheus] (metrics), https://github.com/grafana/tempo[Tempo] (traces) and https://github.com/grafana/loki[Loki] (logs).\n"
"This data can then be visualized by https://github.com/grafana/grafana[Grafana]."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "Configuring your project"
msgstr "Configurando seu projeto"

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Add the Quarkus Grafana OTel LGTM sink (where data goes) extension to your build file:"
msgstr "Adicione a extensão do Quarkus Grafana OTel LGTM sink (para onde vão os dados) ao seu arquivo de compilação:"

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Micrometer"
msgstr "Micrômetro"

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "The https://quarkus.io/guides/telemetry-micrometer[Micrometer Quarkus extension] provides metrics from automatic instrumentation implemented in Quarkus and its extensions."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "There are multiple ways to output Micrometer metrics. Next there are some examples:"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "Using the Micrometer Prometheus registry"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "This is the most common way to output metrics from Micrometer and the default way in Quarkus. The Micrometer Prometheus registry will publish data in the `/q/metrics` endpoint and a scraper inside the Grafana LGTM Dev Service will grab it (*pull* data from the service)."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "Using the Micrometer OTLP registry"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "The https://docs.quarkiverse.io/quarkus-micrometer-registry/dev/micrometer-registry-otlp.html[Quarkiverse Micrometer OTLP registry] will output data using the OpenTelemetry OTLP protocol to the Grafana LGTM Dev Service. This will *push* data out of the service:"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "When using the https://micrometer.io/[Micrometer's] Quarkiverse OTLP registry to push metrics to Grafana OTel LGTM, the `quarkus.micrometer.export.otlp.url` property is automatically set to OTel collector endpoint as seen from the outside of the Docker container."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "OpenTelemetry"
msgstr "OpenTelemetry"

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "With OpenTelemetry, metrics, traces and logs can be created and sent to the Grafana LGTM Dev Service."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "By default, the https://quarkus.io/guides/opentelemetry[OpenTelemetry extension] will produce https://quarkus.io/guides/opentelemetry-tracing[traces]. https://quarkus.io/guides/opentelemetry-metrics[Metrics] and https://quarkus.io/guides/opentelemetry-logging[logs] must be enabled separately."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "The `quarkus-opentelemetry` extension can be added to your build file like this:"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "The `quarkus.otel.exporter.otlp.endpoint` property is automatically set to the OTel collector endpoint as seen from the outside of the Docker container."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "The `quarkus.otel.exporter.otlp.protocol` is set to `http/protobuf`."
msgstr "O site `quarkus.otel.exporter.otlp.protocol` está definido como `http/protobuf` ."

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "Micrometer to OpenTelemetry bridge"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "This extension provides Micrometer metrics and OpenTelemetry metrics, traces and logs. All data is managed and sent out by the OpenTelemetry extension."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "**All signals are enabled by default.**"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "The extension can be added to your build file like this:"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Grafana"
msgstr "Grafana"

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "Grafana UI access"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Once you start your app in dev mode:"
msgstr "Depois de iniciar o aplicativo no modo de desenvolvimento:"

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "You will see a log entry like this:"
msgstr "O senhor verá uma entrada de registro como esta:"

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Remember that Grafana is accessible in an ephemeral port, so you need to check the logs to see which port is being used. In this example, the grafana endpoint is `grafana.endpoint=http://localhost:42797`."
msgstr "Lembre-se de que o Grafana é acessível em uma porta efêmera, portanto, é necessário verificar os logs para ver qual porta está sendo usada. Neste exemplo, o ponto de extremidade do Grafana é `grafana.endpoint=http://localhost:42797` ."

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "Another option is to use the *Dev UI* (http://localhost:8080/q/dev-ui/extensions) as the Grafana URL link will be available and if selected it will open a new browser tab directly to the running Grafana instance:"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "Explore"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "In the explore section, you can query the data for all the data sources."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "To see traces, select the `tempo` data source and query for data:"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "For logs, select the `loki` data source and query for data:"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "The dashboards"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "The Dev Service includes a set of dashboards."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "Each dashboard is tuned for the specific application setup. The available dashboards are:"
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "*Quarkus Micrometer OpenTelemetry*: to be used with the Micrometer and OpenTelemetry extension."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "*Quarkus Micrometer OTLP registry*: to be used with the Micrometer OTLP registry extension."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "*Quarkus Micrometer Prometheus registry*: to be used with the Micrometer Prometheus registry extension."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "*Quarkus OpenTelemetry Logging*: to view logs coming from the OpenTelemetry extension."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
msgid "Some panels in the dashboards might take a few minutes to show accurate data when their values are calculated over a sliding  time window."
msgstr ""

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Additional configuration"
msgstr "Configuração adicional"

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "This extension will configure your `quarkus-opentelemetry` and `quarkus-micrometer-registry-otlp` extensions to send data to the OTel Collector bundled with the Grafana OTel LGTM image."
msgstr "Essa extensão configurará suas extensões `quarkus-opentelemetry` e `quarkus-micrometer-registry-otlp` para enviar dados para o OTel Collector fornecido com a imagem Grafana OTel LGTM."

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "If you don't want all the hassle with Dev Services (e.g. lookup and re-use of existing running containers, etc) you can simply disable Dev Services and enable just Dev Resource usage:"
msgstr "Se não quiser todo o incômodo dos Dev Services (por exemplo, pesquisa e reutilização de contêineres em execução existentes, etc.), o senhor pode simplesmente desativar os Dev Services e ativar apenas o uso dos Dev Resource:"

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Tests"
msgstr "Testes"

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "And for the least 'auto-magical' usage in the tests, simply disable both (Dev Resources are already disabled by default):"
msgstr "E para obter o mínimo de uso \"mágico automático\" nos testes, basta desativar ambos (os Dev Resources já estão desativados por padrão):"

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "And then explicitly list LGTM Dev Resource in the test as a `@QuarkusTestResource` resource:"
msgstr "Em seguida, liste explicitamente o LGTM Dev Resource no teste como um recurso `@QuarkusTestResource` :"

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Testing full Grafana OTel LGTM stack - example"
msgstr "Testando a pilha completa do Grafana OTel LGTM - exemplo"

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Use existing Quarkus MicroMeter OTLP registry"
msgstr "Usar o registro existente do Quarkus MicroMeter OTLP"

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Simply inject the Meter registry into your code -- it will periodically push metrics to Grafana LGTM's OTLP HTTP endpoint."
msgstr "Basta injetar o registro Meter em seu código - ele enviará periodicamente métricas para o ponto de extremidade HTTP OTLP do Grafana LGTM."

#: _versions/main/guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Where you can then check Grafana's datasource API for existing metrics data."
msgstr "Onde o senhor pode então verificar a API de fonte de dados do Grafana para obter dados de métricas existentes."
