msgid ""
msgstr ""
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Movie similarity search using vector databases"
msgstr "Pesquisa de similaridade de filmes usando bancos de dados vetoriais"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Shows how to create a movie similarity search system using a vector database and Quarkus LangChain4j"
msgstr "Mostra como criar um sistema de pesquisa de similaridade de filmes usando um banco de dados vetorial e o Quarkus LangChain4j"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
msgid "Introduction"
msgstr "Introdução"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"With LLMs becoming increasingly popular we often see them being used even for tasks that are not directly related to text generation.\n"
"Such case is using LLMs for recommendation systems. In this post we'll see how you can build such a system using https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j]\n"
"but without using LLMs. More specifically we'll create a simple movie similarity search system using a vector database. The role\n"
"of https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] in this story is to abstract the underlying vector database through the `EmbeddingStore` interface."
msgstr "Como os LLMs estão se tornando cada vez mais populares, é comum vê-los sendo usados até mesmo em tarefas que não estão diretamente relacionadas à geração de texto. Esse caso é o uso de LLMs para sistemas de recomendação. Neste post, veremos como o senhor pode criar um sistema desse tipo usando link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[o Quarkus LangChain4j] , mas sem usar LLMs. Mais especificamente, criaremos um sistema simples de pesquisa de similaridade de filmes usando um banco de dados vetorial. A função do link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] nessa história é abstrair o banco de dados vetorial subjacente por meio da interface `EmbeddingStore` ."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "A relevant sample has been recently added to the https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/[Quarkus LangChain4j samples]."
msgstr "Uma amostra relevante foi adicionada recentemente às link:https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/[amostras do Quarkus LangChain4j] ."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Embeddings"
msgstr "Embeddings"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"An embedding is a way to represent unstructured data (text, images etc.) in a structured way. This is done by mapping the data into a vector.\n"
"As we are able to perform mathematical operations on vectors, such as calculating the distance between them, we can use embeddings to calculate\n"
"how close (or similar) two pieces of data are. In our case, comparing the embeddings of the movie overview can give us a measure of how similar\n"
"the two movies are. This is the premise of this post."
msgstr "Uma incorporação é uma maneira de representar dados não estruturados (texto, imagens etc.) de forma estruturada. Isso é feito por meio do mapeamento dos dados em um vetor. Como podemos realizar operações matemáticas em vetores, como calcular a distância entre eles, podemos usar embeddings para calcular a proximidade (ou semelhança) entre dois dados. Em nosso caso, a comparação dos embeddings da visão geral do filme pode nos dar uma medida da semelhança entre os dois filmes. Essa é a premissa deste post."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "How are embeddings created?"
msgstr "Como os embeddings são criados?"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "There are multiple ways to create embeddings. https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] provides the following:"
msgstr "Há várias maneiras de criar embeddings. link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[O Quarkus LangChain4j] oferece o seguinte:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html[In-process embedding]"
msgstr "link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html[Incorporação em processo]"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "https://docs.quarkiverse.io/quarkus-langchain4j/dev/llms.html[Model provider]"
msgstr "link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/llms.html[Modelo de provedor]"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"In this post we'll use the former. Did I mention that we won't be using LLMs?\n"
"Instead, we'll be using https://github.com/pgvector/pgvector[pgvector] which is a PostgreSQL extension that provides vector operations and indexing."
msgstr "Neste post, usaremos o primeiro. Já mencionei que não usaremos LLMs? Em vez disso, usaremos link:https://github.com/pgvector/pgvector[o pgvector] , que é uma extensão do PostgreSQL que fornece operações vetoriais e indexação."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Our project will need the following dependencies, for https://github.com/pgvector/pgvector[pgvector] and https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html[in-process embedding]:"
msgstr "Nosso projeto precisará das seguintes dependências, para link:https://github.com/pgvector/pgvector[pgvector] e link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html[incorporação em processo] :"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "To be able to use these dependencies without needing to specify versions, the BOM can be imported to the `dependencyManagement` of the project:"
msgstr "Para poder usar essas dependências sem a necessidade de especificar versões, a lista técnica pode ser importada para o site `dependencyManagement` do projeto:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To properly use the in-process embedding model we need to configure it in the `application.properties` file.\n"
"We also need to configure the pgvector dimension and ensure it's aligned with the dimension of the embedding model.\n"
"In our case, it's 384 (the https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] documentation provides the size used by each model)."
msgstr "Para usar corretamente o modelo de incorporação em processo, precisamos configurá-lo no arquivo `application.properties` . Também precisamos configurar a dimensão do pgvector e garantir que ela esteja alinhada com a dimensão do modelo de incorporação. No nosso caso, ela é 384 (a documentação link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[do Quarkus LangChain4j] fornece o tamanho usado por cada modelo)."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "So, the `application.properties` file should look like this:"
msgstr "Portanto, o arquivo `application.properties` deve ter a seguinte aparência:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"*Note*: We can use any other document store supported by https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j], in fact that's one of the key benefits of using it, the abstraction\n"
"of embeddings stores."
msgstr "*Observação* : Podemos usar qualquer outro armazenamento de documentos compatível com o link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] ; na verdade, essa é uma das principais vantagens de usá-lo, a abstração dos armazenamentos de embeddings."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Storing the embedding"
msgstr "Armazenamento da incorporação"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To store the embedding we'll need an `EmbeddingStoreIngestor` The ingestor is created using the `EmbeddingModel` and the `EmbeddingStore`, both provided\n"
"as beans and can be easily injected. Alternatively, the user can specify a document splitter, for splitting large documents into smaller chunks, but we won't be needing that\n"
"in this post, as the movie overview are relatively small."
msgstr "Para armazenar a incorporação, precisaremos de um `EmbeddingStoreIngestor` . O ingestor é criado usando o `EmbeddingModel` e o `EmbeddingStore` , ambos fornecidos como beans e podem ser facilmente injetados. Como alternativa, o usuário pode especificar um divisor de documentos, para dividir documentos grandes em partes menores, mas não precisaremos disso nesta postagem, pois a visão geral do filme é relativamente pequena."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"Before passing the unstructured text to the ingestor we need to wrap it in a `Document` object. The `Document` also contains a `Metadata` object which holds key-value pairs.\n"
"The `Metadata` is really handy as we can add there information needed for correlating the `Document` with other data. In our case we'll use the `Metadata` to store the id of the movie.\n"
"That id will help us correlate the movie overview with the actual movie."
msgstr "Antes de passar o texto não estruturado para o ingestor, precisamos envolvê-lo em um objeto `Document` . O `Document` também contém um objeto `Metadata` que contém pares de valores-chave. O `Metadata` é realmente útil, pois podemos adicionar as informações necessárias para correlacionar o `Document` com outros dados. Em nosso caso, usaremos o `Metadata` para armazenar o ID do filme. Esse ID nos ajudará a correlacionar a visão geral do filme com o filme real."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "The simplified code below shows, how the actual ingestor is created and how the embedding is stored."
msgstr "O código simplificado abaixo mostra como o ingestor real é criado e como a incorporação é armazenada."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"So, how exactly do we use the movie id ? This depends really on how we store the rest of the movie data. In our case, we'll store the movie data in a PostgreSQL database.\n"
"This means that the movie id, corresponds to the id of the Movie in the database."
msgstr "Então, como exatamente usamos o ID do filme? Isso depende muito de como armazenamos o restante dos dados do filme. No nosso caso, armazenaremos os dados do filme em um banco de dados PostgreSQL. Isso significa que o ID do filme corresponde ao ID do filme no banco de dados."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Querying the embedding"
msgstr "Consultar a incorporação"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To query the embedding we'll use the `EmbeddingStore` and the `EmbeddingModel` in order to execute `EmbeddingSearchRequest`.\n"
"The code is pretty straight forward. We use the movie overview to create a search request. The `EmbeddingSearchRequest` builder\n"
"also allows us to specify the maximum number of results and also the minimum similarity threshold. The later allows us to filter\n"
"out embeddings that are not similar enough to the query embedding. In other words, it tells the store that if there are not enough similar results\n"
"to avoid adding irrelevant results to the response."
msgstr "Para consultar a incorporação, usaremos o `EmbeddingStore` e o `EmbeddingModel` para executar o `EmbeddingSearchRequest` . O código é bastante simples. Usamos a visão geral do filme para criar uma solicitação de pesquisa. O construtor `EmbeddingSearchRequest` também nos permite especificar o número máximo de resultados e também o limite mínimo de similaridade. Esse último nos permite filtrar os embeddings que não são suficientemente semelhantes ao embedding da consulta. Em outras palavras, ele informa ao armazenamento que, se não houver resultados semelhantes suficientes, ele deve evitar adicionar resultados irrelevantes à resposta."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Loading the movies"
msgstr "Carregando os filmes"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To populate the movies in the database, we'll use a CSV file containing the top 1000 movies from IMDB.\n"
"The important columns for us are:"
msgstr "Para preencher os filmes no banco de dados, usaremos um arquivo CSV contendo os 1000 filmes mais importantes do IMDB. As colunas importantes para nós são:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "`title` the movie title"
msgstr "`title` o título do filme"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "`overview` the movie overview"
msgstr "`overview` visão geral do filme"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "`link` the link to the image poster"
msgstr "`link` o link para o pôster da imagem"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To easily map CSV entries to `Movie` objects we'll use `Jackson`. Specifically, we will use the `@JsonProperty`\n"
"annotation to map the CSV columns to the `Movie` fields. Also, we'll use `@JsonIgnoreProperties(ignoreUnknown = true)`\n"
"to ignore unknown fields."
msgstr "Para mapear facilmente entradas CSV para objetos `Movie` , usaremos `Jackson` . Especificamente, usaremos a anotação `@JsonProperty` para mapear as colunas CSV para os campos `Movie` . Além disso, usaremos `@JsonIgnoreProperties(ignoreUnknown = true)` para ignorar campos desconhecidos."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "So, a simplified version of our Movie entity object looks like:"
msgstr "Portanto, uma versão simplificada do nosso objeto de entidade Movie tem a seguinte aparência:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "So, now we are ready to load our movies from the CSV to our relational and vector databases."
msgstr "Portanto, agora estamos prontos para carregar nossos filmes do CSV para nossos bancos de dados relacionais e vetoriais."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Key points:"
msgstr "Pontos principais:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Observing the `StartupEvent` allows us to load the movies when the application starts"
msgstr "Observar o site `StartupEvent` nos permite carregar os filmes quando o aplicativo é iniciado"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "CSVMapper is used to map the CSV entries to `Movie` objects"
msgstr "O CSVMapper é usado para mapear as entradas CSV para os objetos `Movie` "

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "We save each movie using a @Transaction method because we need that `id` that's often generated by the database"
msgstr "Salvamos cada filme usando um método @Transaction porque precisamos do `id` que é frequentemente gerado pelo banco de dados"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "We ingest the documents in a batch. This can make a huge difference especially, if we move from in-process to remote embedding models."
msgstr "Nós ingerimos os documentos em um lote. Isso pode fazer uma grande diferença, especialmente se passarmos de modelos de incorporação em processo para modelos de incorporação remota."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "To use the CSV mapper, we'll need to Jackson's CSV dataformat dependency:"
msgstr "Para usar o mapeador CSV, precisaremos da dependência do formato de dados CSV do Jackson:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "The path of the movies file is specified in the `application.properties` file."
msgstr "O caminho do arquivo de filmes é especificado no arquivo `application.properties` ."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Bringing it all together"
msgstr "Reunindo tudo isso"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"The only thing that's left is to create a REST endpoint that allows us to search for similar movies. We could also use a simple UI.\n"
"Let's start with the REST endpoint. It's pretty straightforward. We need two methods, one for searching movies and one for searching similar movies.\n"
"For the former we just use the `Movie` entity, for the latter we inject and use the `MovieRecommendationService` we created earlier."
msgstr "A única coisa que falta é criar um ponto de extremidade REST que nos permita pesquisar filmes semelhantes. Também poderíamos usar uma interface de usuário simples. Vamos começar com o endpoint REST. Ele é bem simples. Precisamos de dois métodos, um para pesquisar filmes e outro para pesquisar filmes semelhantes. Para o primeiro, basta usar a entidade `Movie` ; para o segundo, injetamos e usamos o `MovieRecommendationService` que criamos anteriormente."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "For the UI, let's just use a simple HTML page that uses the REST endpoint to search for similar movies."
msgstr "Para a interface do usuário, vamos usar apenas uma página HTML simples que usa o endpoint REST para pesquisar filmes semelhantes."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "The key elements of that page are:"
msgstr "Os principais elementos dessa página são:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "movie-box: a text field for entering the movie title"
msgstr "movie-box: um campo de texto para inserir o título do filme"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "search-results: an unordered list for displaying the search results"
msgstr "search-results: uma lista não ordenada para exibir os resultados da pesquisa"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "movie-overview: div for displaying the overview of the selected movie"
msgstr "movie-overview: div para exibir a visão geral do filme selecionado"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "movie-poster: an image for displaying the movie poster"
msgstr "movie-poster: uma imagem para exibir o pôster do filme"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "similar-results: an additional unordered list for displaying the similar movies"
msgstr "similar-results: uma lista não ordenada adicional para exibir os filmes semelhantes"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"It's important to remember that the `Movie` entity is using Jackson to map the CSV columns to the entity fields.\n"
"This means that when a `Movie` is serialized to JSON, it will use the CSV column names as the field names and not\n"
"the entity field names. The HTML code below needs to take that into consideration."
msgstr "É importante lembrar que a entidade `Movie` está usando Jackson para mapear as colunas CSV para os campos da entidade. Isso significa que quando um `Movie` for serializado para JSON, ele usará os nomes das colunas do CSV como nomes de campo e não os nomes dos campos da entidade. O código HTML abaixo precisa levar isso em consideração."

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"I won't go into much detail about the HTML code as it's outside the scope of this post.\n"
"The final results should look like this:"
msgstr "Não entrarei em muitos detalhes sobre o código HTML, pois isso não faz parte do escopo desta publicação. Os resultados finais devem ter a seguinte aparência:"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Conclusion"
msgstr "Conclusão"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"The quality of the recommendations depends on the accuracy of the movie overview and also on the quality of the embeddings.\n"
"This means that better embedding models can lead to better recommendations. The vector database used could possibly also\n"
"affect the quality of the recommendations, but that's a topic for another post."
msgstr "A qualidade das recomendações depende da precisão da visão geral do filme e também da qualidade das incorporações. Isso significa que melhores modelos de incorporação podem levar a melhores recomendações. O banco de dados de vetores usado também pode afetar a qualidade das recomendações, mas esse é um tópico para outra publicação."
